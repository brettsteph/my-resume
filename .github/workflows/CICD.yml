# This is a basic workflow to help you get started with Actions

name: Website Upload && CloudFront Invalidation

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  job-lint:
    # Name the Job
    name: Lint Code Base
    # Set the agent to run on
    runs-on: ubuntu-latest
    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      ################################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

  job-infrastructure:
    name: Make sure infrastructure is up and running
    needs: job-lint
    runs-on: ubuntu-latest
    steps:
      - name: Build Site
        run: |
          echo "BuildSite"
          sleep 5s
      - uses: convictional/trigger-workflow-and-wait@v1.6.1
        with:
          owner: igadget777
          repo: Cloud-Resume-Challenge-Infra
          github_token: ${{ secrets.MY_PERSONAL_ACCESS_TOKEN }}
          workflow_file_name: Infra-CICD.yml
      - name: job-upload-site is next
        run: |
          echo "Upload site"
          sleep 5s

  job-upload-site:
    name: sync website files to s3 bucket and invalidate CloudFront
    if: github.event_name == 'push'
    needs: job-infrastructure
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: "us-east-1" # optional: defaults to us-east-1
          # SOURCE_DIR: "resume-site" # optional: defaults to entire repository

      # - name: Get API Gateway ID 
      #   env:
      #     AWS_API_GATEWAY_NAME: ${{ secrets.AWS_API_GATEWAY_NAME }}
      #   run: echo rest_api_id=aws apigateway get-rest-apis --query "items[?name=='$AWS_API_GATEWAY_NAME'].id" --output text >> "$GITHUB_ENV"

      # - name: Export API invoke url to a JavaScript file
      #   run: echo const API = env.rest_api_id.execute-api.us-east-1.amazonaws.com/prod > ./invoke-url.js

      - name: Sync S3 Buckete
        env:
          AWS_S3_BUCKET: ${{secrets.AWS_S3_BUCKET}}
        run: aws s3 cp . s3://"$AWS_S3_BUCKET" --exclude ".gitignore" --exclude ".git*/*" --exclude ".DS_Store" --follow-symlinks --recursive
        # run: aws s3 sync . s3://"$AWS_S3_BUCKET" --exclude ".gitignore" --exclude ".git*/*" --follow-symlinks --delete

      # - name: Store Cloudfront Distribution Id in env variable        
      #   run: |
      #     echo "$DIST_ID"=aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].Id}[?origin=='$AWS_S3_BUCKET'].id" --output text >> "$GITHUB_ENV"
       
      - name: Invalidate Cloudfront
        env:
          AWS_CLOUDFRONT_DISTRIBUTION_ID: ${{secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID}}
        run: aws cloudfront create-invalidation --distribution-id "$AWS_CLOUDFRONT_DISTRIBUTION_ID" --paths "/*"
