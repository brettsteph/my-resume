name: Upload Website

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  job-build:
    # Name the Job
    name: Lint Code Base
    # Set the agent to run on
    runs-on: ubuntu-latest
    ##################
    # Load all steps #
    ##################
    steps:
      ##########################
      # Checkout the code base #
      ##########################
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          # Full git history is needed to get a proper list of changed files within `super-linter`
          fetch-depth: 0
      ################################
      # Run Linter against code base #
      ################################
      - name: Lint Code Base
        uses: github/super-linter/slim@v4
        env:
          VALIDATE_ALL_CODEBASE: false
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  job-upload-site:
    name: sync website files to s3 bucket and invalidate CloudFront
    runs-on: ubuntu-latest
    needs: job-build
    environment: production
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: "us-east-1" # optional: defaults to us-east-1
          # SOURCE_DIR: "resume-site" # optional: defaults to entire repository

      - name: Get API Gateway ID and store in environmnt variable
        run: echo rest_api_id=aws apigateway get-rest-apis --query 'items[?name==`${{secrets.AWS_API_GATEWAY_NAME}}`].id' --output text >> $GITHUB_ENV

      - name: Export API invoke url to a JavaScript file
        run: echo const API = {{ env.rest_api_id }}.execute-api.us-east-1.amazonaws.com/prod > ./website/invoke-url.js

      - name: Copy to S3
        run: aws s3 sync . s3://{AWS_S3_BUCKET}" --exclude '.gitignore' --exclude '.git*/*' --follow-symlinks --delete
        env:
          AWS_S3_BUCKET: ${{secrets.AWS_S3_BUCKET}}
          # AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          # AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          # AWS_REGION: 'us-east-1'   # optional: defaults to us-east-1

        # run: aws s3 sync . s3://${{secrets.AWS_S3_BUCKET}} --exclude ".git*, .terraform, files"

  job-invalidate-cdn:
    name: Invalidate CloudFront
    runs-on: ubuntu-latest
    needs: job-upload-site
    environment: production
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_REGION: "us-east-1" # optional: defaults to us-east-1
      - name: Store Cloudfront Distribution Id in env variable
        run: echo distribution_id=aws cloudfront list-distributions --query "DistributionList.Items[*].{id:Id,origin:Origins.Items[0].Id}[?origin==${{secrets.AWS_S3_BUCKET}}].id" --output text >> $GITHUB_ENV
      - name: Invalidate Cloudfront
        run: aws cloudfront create-invalidation --distribution-id ${{ env.distribution_id }} --paths "/*"
